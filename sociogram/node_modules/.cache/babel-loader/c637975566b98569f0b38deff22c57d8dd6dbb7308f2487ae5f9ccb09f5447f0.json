{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nmodule.exports = function (hljs) {\n  var NUM_SUFFIX = '([uif](8|16|32|64|size))\\?';\n  var BLOCK_COMMENT = hljs.inherit(hljs.C_BLOCK_COMMENT_MODE);\n  BLOCK_COMMENT.contains.push('self');\n  return {\n    aliases: ['rs'],\n    keywords: {\n      keyword: 'alignof as be box break const continue crate do else enum extern ' + 'false fn for if impl in let loop match mod mut offsetof once priv ' + 'proc pub pure ref return self Self sizeof static struct super trait true ' + 'type typeof unsafe unsized use virtual while where yield ' + 'int i8 i16 i32 i64 ' + 'uint u8 u32 u64 ' + 'float f32 f64 ' + 'str char bool',\n      built_in:\n      // prelude\n      'Copy Send Sized Sync Drop Fn FnMut FnOnce drop Box ToOwned Clone ' + 'PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator ' + 'Extend IntoIterator DoubleEndedIterator ExactSizeIterator Option ' + 'Some None Result Ok Err SliceConcatExt String ToString Vec ' +\n      // macros\n      'assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! ' + 'debug_assert! debug_assert_eq! env! panic! file! format! format_args! ' + 'include_bin! include_str! line! local_data_key! module_path! ' + 'option_env! print! println! select! stringify! try! unimplemented! ' + 'unreachable! vec! write! writeln!'\n    },\n    lexemes: hljs.IDENT_RE + '!?',\n    illegal: '</',\n    contains: [hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT, hljs.inherit(hljs.QUOTE_STRING_MODE, {\n      illegal: null\n    }), {\n      className: 'string',\n      variants: [{\n        begin: /r(#*)\".*?\"\\1(?!#)/\n      }, {\n        begin: /'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/\n      }, {\n        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\n      }]\n    }, {\n      className: 'number',\n      variants: [{\n        begin: '\\\\b0b([01_]+)' + NUM_SUFFIX\n      }, {\n        begin: '\\\\b0o([0-7_]+)' + NUM_SUFFIX\n      }, {\n        begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUM_SUFFIX\n      }, {\n        begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' + NUM_SUFFIX\n      }],\n      relevance: 0\n    }, {\n      className: 'function',\n      beginKeywords: 'fn',\n      end: '(\\\\(|<)',\n      excludeEnd: true,\n      contains: [hljs.UNDERSCORE_TITLE_MODE]\n    }, {\n      className: 'preprocessor',\n      begin: '#\\\\!?\\\\[',\n      end: '\\\\]'\n    }, {\n      beginKeywords: 'type',\n      end: '(=|<)',\n      contains: [hljs.UNDERSCORE_TITLE_MODE],\n      illegal: '\\\\S'\n    }, {\n      beginKeywords: 'trait enum',\n      end: '{',\n      contains: [hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {\n        endsParent: true\n      })],\n      illegal: '[\\\\w\\\\d]'\n    }, {\n      begin: hljs.IDENT_RE + '::'\n    }, {\n      begin: '->'\n    }]\n  };\n};","map":{"version":3,"names":["module","exports","hljs","NUM_SUFFIX","BLOCK_COMMENT","inherit","C_BLOCK_COMMENT_MODE","contains","push","aliases","keywords","keyword","built_in","lexemes","IDENT_RE","illegal","C_LINE_COMMENT_MODE","QUOTE_STRING_MODE","className","variants","begin","relevance","beginKeywords","end","excludeEnd","UNDERSCORE_TITLE_MODE","endsParent"],"sources":["/Users/ayanyadav/node_modules/highlight.js/lib/languages/rust.js"],"sourcesContent":["module.exports = function(hljs) {\n  var NUM_SUFFIX = '([uif](8|16|32|64|size))\\?';\n  var BLOCK_COMMENT = hljs.inherit(hljs.C_BLOCK_COMMENT_MODE);\n  BLOCK_COMMENT.contains.push('self');\n  return {\n    aliases: ['rs'],\n    keywords: {\n      keyword:\n        'alignof as be box break const continue crate do else enum extern ' +\n        'false fn for if impl in let loop match mod mut offsetof once priv ' +\n        'proc pub pure ref return self Self sizeof static struct super trait true ' +\n        'type typeof unsafe unsized use virtual while where yield ' +\n        'int i8 i16 i32 i64 ' +\n        'uint u8 u32 u64 ' +\n        'float f32 f64 ' +\n        'str char bool',\n      built_in:\n        // prelude\n        'Copy Send Sized Sync Drop Fn FnMut FnOnce drop Box ToOwned Clone ' +\n        'PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator ' +\n        'Extend IntoIterator DoubleEndedIterator ExactSizeIterator Option ' +\n        'Some None Result Ok Err SliceConcatExt String ToString Vec ' +\n        // macros\n        'assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! ' +\n        'debug_assert! debug_assert_eq! env! panic! file! format! format_args! ' +\n        'include_bin! include_str! line! local_data_key! module_path! ' +\n        'option_env! print! println! select! stringify! try! unimplemented! ' +\n        'unreachable! vec! write! writeln!'\n    },\n    lexemes: hljs.IDENT_RE + '!?',\n    illegal: '</',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      BLOCK_COMMENT,\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n      {\n        className: 'string',\n        variants: [\n           { begin: /r(#*)\".*?\"\\1(?!#)/ },\n           { begin: /'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/ },\n           { begin: /'[a-zA-Z_][a-zA-Z0-9_]*/ }\n        ]\n      },\n      {\n        className: 'number',\n        variants: [\n          { begin: '\\\\b0b([01_]+)' + NUM_SUFFIX },\n          { begin: '\\\\b0o([0-7_]+)' + NUM_SUFFIX },\n          { begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUM_SUFFIX },\n          { begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' +\n                   NUM_SUFFIX\n          }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'function',\n        beginKeywords: 'fn', end: '(\\\\(|<)', excludeEnd: true,\n        contains: [hljs.UNDERSCORE_TITLE_MODE]\n      },\n      {\n        className: 'preprocessor',\n        begin: '#\\\\!?\\\\[', end: '\\\\]'\n      },\n      {\n        beginKeywords: 'type', end: '(=|<)',\n        contains: [hljs.UNDERSCORE_TITLE_MODE],\n        illegal: '\\\\S'\n      },\n      {\n        beginKeywords: 'trait enum', end: '{',\n        contains: [\n          hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})\n        ],\n        illegal: '[\\\\w\\\\d]'\n      },\n      {\n        begin: hljs.IDENT_RE + '::'\n      },\n      {\n        begin: '->'\n      }\n    ]\n  };\n};"],"mappings":";AAAAA,MAAM,CAACC,OAAO,GAAG,UAASC,IAAI,EAAE;EAC9B,IAAIC,UAAU,GAAG,4BAA4B;EAC7C,IAAIC,aAAa,GAAGF,IAAI,CAACG,OAAO,CAACH,IAAI,CAACI,oBAAoB,CAAC;EAC3DF,aAAa,CAACG,QAAQ,CAACC,IAAI,CAAC,MAAM,CAAC;EACnC,OAAO;IACLC,OAAO,EAAE,CAAC,IAAI,CAAC;IACfC,QAAQ,EAAE;MACRC,OAAO,EACL,mEAAmE,GACnE,oEAAoE,GACpE,2EAA2E,GAC3E,2DAA2D,GAC3D,qBAAqB,GACrB,kBAAkB,GAClB,gBAAgB,GAChB,eAAe;MACjBC,QAAQ;MACN;MACA,mEAAmE,GACnE,qEAAqE,GACrE,mEAAmE,GACnE,6DAA6D;MAC7D;MACA,uEAAuE,GACvE,wEAAwE,GACxE,+DAA+D,GAC/D,qEAAqE,GACrE;IACJ,CAAC;IACDC,OAAO,EAAEX,IAAI,CAACY,QAAQ,GAAG,IAAI;IAC7BC,OAAO,EAAE,IAAI;IACbR,QAAQ,EAAE,CACRL,IAAI,CAACc,mBAAmB,EACxBZ,aAAa,EACbF,IAAI,CAACG,OAAO,CAACH,IAAI,CAACe,iBAAiB,EAAE;MAACF,OAAO,EAAE;IAAI,CAAC,CAAC,EACrD;MACEG,SAAS,EAAE,QAAQ;MACnBC,QAAQ,EAAE,CACP;QAAEC,KAAK,EAAE;MAAoB,CAAC,EAC9B;QAAEA,KAAK,EAAE;MAAgC,CAAC,EAC1C;QAAEA,KAAK,EAAE;MAA0B,CAAC;IAEzC,CAAC,EACD;MACEF,SAAS,EAAE,QAAQ;MACnBC,QAAQ,EAAE,CACR;QAAEC,KAAK,EAAE,eAAe,GAAGjB;MAAW,CAAC,EACvC;QAAEiB,KAAK,EAAE,gBAAgB,GAAGjB;MAAW,CAAC,EACxC;QAAEiB,KAAK,EAAE,sBAAsB,GAAGjB;MAAW,CAAC,EAC9C;QAAEiB,KAAK,EAAE,iDAAiD,GACjDjB;MACT,CAAC,CACF;MACDkB,SAAS,EAAE;IACb,CAAC,EACD;MACEH,SAAS,EAAE,UAAU;MACrBI,aAAa,EAAE,IAAI;MAAEC,GAAG,EAAE,SAAS;MAAEC,UAAU,EAAE,IAAI;MACrDjB,QAAQ,EAAE,CAACL,IAAI,CAACuB,qBAAqB;IACvC,CAAC,EACD;MACEP,SAAS,EAAE,cAAc;MACzBE,KAAK,EAAE,UAAU;MAAEG,GAAG,EAAE;IAC1B,CAAC,EACD;MACED,aAAa,EAAE,MAAM;MAAEC,GAAG,EAAE,OAAO;MACnChB,QAAQ,EAAE,CAACL,IAAI,CAACuB,qBAAqB,CAAC;MACtCV,OAAO,EAAE;IACX,CAAC,EACD;MACEO,aAAa,EAAE,YAAY;MAAEC,GAAG,EAAE,GAAG;MACrChB,QAAQ,EAAE,CACRL,IAAI,CAACG,OAAO,CAACH,IAAI,CAACuB,qBAAqB,EAAE;QAACC,UAAU,EAAE;MAAI,CAAC,CAAC,CAC7D;MACDX,OAAO,EAAE;IACX,CAAC,EACD;MACEK,KAAK,EAAElB,IAAI,CAACY,QAAQ,GAAG;IACzB,CAAC,EACD;MACEM,KAAK,EAAE;IACT,CAAC;EAEL,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}