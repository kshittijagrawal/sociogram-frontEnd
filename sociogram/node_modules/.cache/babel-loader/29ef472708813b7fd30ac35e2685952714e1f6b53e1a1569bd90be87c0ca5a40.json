{"ast":null,"code":"module.exports = function (hljs) {\n  // Since there are numerous special names in Julia, it is too much trouble\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\n  // built-ins) are automatically generated from Julia (v0.3.0) itself through\n  // following scripts for each.\n\n  var KEYWORDS = {\n    // # keyword generator\n    // println(\"\\\"in\\\",\")\n    // for kw in Base.REPLCompletions.complete_keyword(\"\")\n    //     println(\"\\\"$kw\\\",\")\n    // end\n    keyword: 'in abstract baremodule begin bitstype break catch ccall const continue do else elseif end export ' + 'finally for function global if immutable import importall let local macro module quote return try type ' + 'typealias using while',\n    // # literal generator\n    // println(\"\\\"true\\\",\\n\\\"false\\\"\")\n    // for name in Base.REPLCompletions.completions(\"\", 0)[1]\n    //     try\n    //         s = symbol(name)\n    //         v = eval(s)\n    //         if !isa(v, Function) &&\n    //            !isa(v, DataType) &&\n    //            !issubtype(typeof(v), Tuple) &&\n    //            !isa(v, UnionType) &&\n    //            !isa(v, Module) &&\n    //            !isa(v, TypeConstructor) &&\n    //            !isa(v, Colon)\n    //             println(\"\\\"$name\\\",\")\n    //         end\n    //     end\n    // end\n    literal: 'true false ANY ARGS CPU_CORES C_NULL DL_LOAD_PATH DevNull ENDIAN_BOM ENV I|0 Inf Inf16 Inf32 ' + 'InsertionSort JULIA_HOME LOAD_PATH MS_ASYNC MS_INVALIDATE MS_SYNC MergeSort NaN NaN16 NaN32 OS_NAME QuickSort ' + 'RTLD_DEEPBIND RTLD_FIRST RTLD_GLOBAL RTLD_LAZY RTLD_LOCAL RTLD_NODELETE RTLD_NOLOAD RTLD_NOW RoundDown ' + 'RoundFromZero RoundNearest RoundToZero RoundUp STDERR STDIN STDOUT VERSION WORD_SIZE catalan cglobal e|0 eu|0 ' + 'eulergamma golden im nothing pi γ π φ',\n    // # built_in generator:\n    // for name in Base.REPLCompletions.completions(\"\", 0)[1]\n    //     try\n    //         v = eval(symbol(name))\n    //         if isa(v, DataType)\n    //             println(\"\\\"$name\\\",\")\n    //         end\n    //     end\n    // end\n    built_in: 'ASCIIString AbstractArray AbstractRNG AbstractSparseArray Any ArgumentError Array Associative Base64Pipe ' + 'Bidiagonal BigFloat BigInt BitArray BitMatrix BitVector Bool BoundsError Box CFILE Cchar Cdouble Cfloat Char ' + 'CharString Cint Clong Clonglong ClusterManager Cmd Coff_t Colon Complex Complex128 Complex32 Complex64 ' + 'Condition Cptrdiff_t Cshort Csize_t Cssize_t Cuchar Cuint Culong Culonglong Cushort Cwchar_t DArray DataType ' + 'DenseArray Diagonal Dict DimensionMismatch DirectIndexString Display DivideError DomainError EOFError ' + 'EachLine Enumerate ErrorException Exception Expr Factorization FileMonitor FileOffset Filter Float16 Float32 ' + 'Float64 FloatRange FloatingPoint Function GetfieldNode GotoNode Hermitian IO IOBuffer IOStream IPv4 IPv6 ' + 'InexactError Int Int128 Int16 Int32 Int64 Int8 IntSet Integer InterruptException IntrinsicFunction KeyError ' + 'LabelNode LambdaStaticData LineNumberNode LoadError LocalProcess MIME MathConst MemoryError MersenneTwister ' + 'Method MethodError MethodTable Module NTuple NewvarNode Nothing Number ObjectIdDict OrdinalRange ' + 'OverflowError ParseError PollingFileWatcher ProcessExitedException ProcessGroup Ptr QuoteNode Range Range1 ' + 'Ranges Rational RawFD Real Regex RegexMatch RemoteRef RepString RevString RopeString RoundingMode Set ' + 'SharedArray Signed SparseMatrixCSC StackOverflowError Stat StatStruct StepRange String SubArray SubString ' + 'SymTridiagonal Symbol SymbolNode Symmetric SystemError Task TextDisplay Timer TmStruct TopNode Triangular ' + 'Tridiagonal Type TypeConstructor TypeError TypeName TypeVar UTF16String UTF32String UTF8String UdpSocket ' + 'Uint Uint128 Uint16 Uint32 Uint64 Uint8 UndefRefError UndefVarError UniformScaling UnionType UnitRange ' + 'Unsigned Vararg VersionNumber WString WeakKeyDict WeakRef Woodbury Zip'\n  };\n\n  // ref: http://julia.readthedocs.org/en/latest/manual/variables/#allowed-variable-names\n  var VARIABLE_NAME_RE = \"[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*\";\n\n  // placeholder for recursive self-reference\n  var DEFAULT = {\n    lexemes: VARIABLE_NAME_RE,\n    keywords: KEYWORDS\n  };\n  var TYPE_ANNOTATION = {\n    className: \"type-annotation\",\n    begin: /::/\n  };\n  var SUBTYPE = {\n    className: \"subtype\",\n    begin: /<:/\n  };\n\n  // ref: http://julia.readthedocs.org/en/latest/manual/integers-and-floating-point-numbers/\n  var NUMBER = {\n    className: \"number\",\n    // supported numeric literals:\n    //  * binary literal (e.g. 0x10)\n    //  * octal literal (e.g. 0o76543210)\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\n    relevance: 0\n  };\n  var CHAR = {\n    className: \"char\",\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n  };\n  var INTERPOLATION = {\n    className: 'subst',\n    begin: /\\$\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS\n  };\n  var INTERPOLATED_VARIABLE = {\n    className: 'variable',\n    begin: \"\\\\$\" + VARIABLE_NAME_RE\n  };\n\n  // TODO: neatly escape normal code in string literal\n  var STRING = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    variants: [{\n      begin: /\\w*\"/,\n      end: /\"\\w*/\n    }, {\n      begin: /\\w*\"\"\"/,\n      end: /\"\"\"\\w*/\n    }]\n  };\n  var COMMAND = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    begin: '`',\n    end: '`'\n  };\n  var MACROCALL = {\n    className: \"macrocall\",\n    begin: \"@\" + VARIABLE_NAME_RE\n  };\n  var COMMENT = {\n    className: \"comment\",\n    variants: [{\n      begin: \"#=\",\n      end: \"=#\",\n      relevance: 10\n    }, {\n      begin: '#',\n      end: '$'\n    }]\n  };\n  DEFAULT.contains = [NUMBER, CHAR, TYPE_ANNOTATION, SUBTYPE, STRING, COMMAND, MACROCALL, COMMENT, hljs.HASH_COMMENT_MODE];\n  INTERPOLATION.contains = DEFAULT.contains;\n  return DEFAULT;\n};","map":{"version":3,"names":["module","exports","hljs","KEYWORDS","keyword","literal","built_in","VARIABLE_NAME_RE","DEFAULT","lexemes","keywords","TYPE_ANNOTATION","className","begin","SUBTYPE","NUMBER","relevance","CHAR","INTERPOLATION","end","INTERPOLATED_VARIABLE","STRING","contains","BACKSLASH_ESCAPE","variants","COMMAND","MACROCALL","COMMENT","HASH_COMMENT_MODE"],"sources":["/Users/ayanyadav/node_modules/highlight.js/lib/languages/julia.js"],"sourcesContent":["module.exports = function(hljs) {\n  // Since there are numerous special names in Julia, it is too much trouble\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\n  // built-ins) are automatically generated from Julia (v0.3.0) itself through\n  // following scripts for each.\n\n  var KEYWORDS = {\n    // # keyword generator\n    // println(\"\\\"in\\\",\")\n    // for kw in Base.REPLCompletions.complete_keyword(\"\")\n    //     println(\"\\\"$kw\\\",\")\n    // end\n    keyword:\n      'in abstract baremodule begin bitstype break catch ccall const continue do else elseif end export ' +\n      'finally for function global if immutable import importall let local macro module quote return try type ' +\n      'typealias using while',\n\n    // # literal generator\n    // println(\"\\\"true\\\",\\n\\\"false\\\"\")\n    // for name in Base.REPLCompletions.completions(\"\", 0)[1]\n    //     try\n    //         s = symbol(name)\n    //         v = eval(s)\n    //         if !isa(v, Function) &&\n    //            !isa(v, DataType) &&\n    //            !issubtype(typeof(v), Tuple) &&\n    //            !isa(v, UnionType) &&\n    //            !isa(v, Module) &&\n    //            !isa(v, TypeConstructor) &&\n    //            !isa(v, Colon)\n    //             println(\"\\\"$name\\\",\")\n    //         end\n    //     end\n    // end\n    literal:\n      'true false ANY ARGS CPU_CORES C_NULL DL_LOAD_PATH DevNull ENDIAN_BOM ENV I|0 Inf Inf16 Inf32 ' +\n      'InsertionSort JULIA_HOME LOAD_PATH MS_ASYNC MS_INVALIDATE MS_SYNC MergeSort NaN NaN16 NaN32 OS_NAME QuickSort ' +\n      'RTLD_DEEPBIND RTLD_FIRST RTLD_GLOBAL RTLD_LAZY RTLD_LOCAL RTLD_NODELETE RTLD_NOLOAD RTLD_NOW RoundDown ' +\n      'RoundFromZero RoundNearest RoundToZero RoundUp STDERR STDIN STDOUT VERSION WORD_SIZE catalan cglobal e|0 eu|0 ' +\n      'eulergamma golden im nothing pi γ π φ',\n\n    // # built_in generator:\n    // for name in Base.REPLCompletions.completions(\"\", 0)[1]\n    //     try\n    //         v = eval(symbol(name))\n    //         if isa(v, DataType)\n    //             println(\"\\\"$name\\\",\")\n    //         end\n    //     end\n    // end\n    built_in:\n      'ASCIIString AbstractArray AbstractRNG AbstractSparseArray Any ArgumentError Array Associative Base64Pipe ' +\n      'Bidiagonal BigFloat BigInt BitArray BitMatrix BitVector Bool BoundsError Box CFILE Cchar Cdouble Cfloat Char ' +\n      'CharString Cint Clong Clonglong ClusterManager Cmd Coff_t Colon Complex Complex128 Complex32 Complex64 ' +\n      'Condition Cptrdiff_t Cshort Csize_t Cssize_t Cuchar Cuint Culong Culonglong Cushort Cwchar_t DArray DataType ' +\n      'DenseArray Diagonal Dict DimensionMismatch DirectIndexString Display DivideError DomainError EOFError ' +\n      'EachLine Enumerate ErrorException Exception Expr Factorization FileMonitor FileOffset Filter Float16 Float32 ' +\n      'Float64 FloatRange FloatingPoint Function GetfieldNode GotoNode Hermitian IO IOBuffer IOStream IPv4 IPv6 ' +\n      'InexactError Int Int128 Int16 Int32 Int64 Int8 IntSet Integer InterruptException IntrinsicFunction KeyError ' +\n      'LabelNode LambdaStaticData LineNumberNode LoadError LocalProcess MIME MathConst MemoryError MersenneTwister ' +\n      'Method MethodError MethodTable Module NTuple NewvarNode Nothing Number ObjectIdDict OrdinalRange ' +\n      'OverflowError ParseError PollingFileWatcher ProcessExitedException ProcessGroup Ptr QuoteNode Range Range1 ' +\n      'Ranges Rational RawFD Real Regex RegexMatch RemoteRef RepString RevString RopeString RoundingMode Set ' +\n      'SharedArray Signed SparseMatrixCSC StackOverflowError Stat StatStruct StepRange String SubArray SubString ' +\n      'SymTridiagonal Symbol SymbolNode Symmetric SystemError Task TextDisplay Timer TmStruct TopNode Triangular ' +\n      'Tridiagonal Type TypeConstructor TypeError TypeName TypeVar UTF16String UTF32String UTF8String UdpSocket ' +\n      'Uint Uint128 Uint16 Uint32 Uint64 Uint8 UndefRefError UndefVarError UniformScaling UnionType UnitRange ' +\n      'Unsigned Vararg VersionNumber WString WeakKeyDict WeakRef Woodbury Zip'\n  };\n\n  // ref: http://julia.readthedocs.org/en/latest/manual/variables/#allowed-variable-names\n  var VARIABLE_NAME_RE = \"[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*\";\n\n  // placeholder for recursive self-reference\n  var DEFAULT = { lexemes: VARIABLE_NAME_RE, keywords: KEYWORDS };\n\n  var TYPE_ANNOTATION = {\n    className: \"type-annotation\",\n    begin: /::/\n  };\n\n  var SUBTYPE = {\n    className: \"subtype\",\n    begin: /<:/\n  };\n\n  // ref: http://julia.readthedocs.org/en/latest/manual/integers-and-floating-point-numbers/\n  var NUMBER = {\n    className: \"number\",\n    // supported numeric literals:\n    //  * binary literal (e.g. 0x10)\n    //  * octal literal (e.g. 0o76543210)\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\n    relevance: 0\n  };\n\n  var CHAR = {\n    className: \"char\",\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n  };\n\n  var INTERPOLATION = {\n    className: 'subst',\n    begin: /\\$\\(/, end: /\\)/,\n    keywords: KEYWORDS\n  };\n\n  var INTERPOLATED_VARIABLE = {\n    className: 'variable',\n    begin: \"\\\\$\" + VARIABLE_NAME_RE\n  };\n\n  // TODO: neatly escape normal code in string literal\n  var STRING = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    variants: [\n      { begin: /\\w*\"/, end: /\"\\w*/ },\n      { begin: /\\w*\"\"\"/, end: /\"\"\"\\w*/ }\n    ]\n  };\n\n  var COMMAND = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    begin: '`', end: '`'\n  };\n\n  var MACROCALL = {\n    className: \"macrocall\",\n    begin: \"@\" + VARIABLE_NAME_RE\n  };\n\n  var COMMENT = {\n    className: \"comment\",\n    variants: [\n      { begin: \"#=\", end: \"=#\", relevance: 10 },\n      { begin: '#', end: '$' }\n    ]\n  };\n\n  DEFAULT.contains = [\n    NUMBER,\n    CHAR,\n    TYPE_ANNOTATION,\n    SUBTYPE,\n    STRING,\n    COMMAND,\n    MACROCALL,\n    COMMENT,\n    hljs.HASH_COMMENT_MODE\n  ];\n  INTERPOLATION.contains = DEFAULT.contains;\n\n  return DEFAULT;\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}