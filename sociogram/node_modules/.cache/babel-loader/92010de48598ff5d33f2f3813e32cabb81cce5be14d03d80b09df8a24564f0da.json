{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nmodule.exports = function (hljs) {\n  var IDENT_RE = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\n  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';\n\n  /* Generic Modes */\n\n  var RULES = [],\n    VALUE = []; // forward def. for recursive modes\n\n  var STRING_MODE = function (c) {\n    return {\n      // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n      className: 'string',\n      begin: '~?' + c + '.*?' + c\n    };\n  };\n  var IDENT_MODE = function (name, begin, relevance) {\n    return {\n      className: name,\n      begin: begin,\n      relevance: relevance\n    };\n  };\n  var FUNCT_MODE = function (name, ident, obj) {\n    return hljs.inherit({\n      className: name,\n      begin: ident + '\\\\(',\n      end: '\\\\(',\n      returnBegin: true,\n      excludeEnd: true,\n      relevance: 0\n    }, obj);\n  };\n  var PARENS_MODE = {\n    // used only to properly balance nested parens inside mixin call, def. arg list\n    begin: '\\\\(',\n    end: '\\\\)',\n    contains: VALUE,\n    relevance: 0\n  };\n\n  // generic Less highlighter (used almost everywhere except selectors):\n  VALUE.push(hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRING_MODE(\"'\"), STRING_MODE('\"'), hljs.CSS_NUMBER_MODE,\n  // fixme: it does not include dot for numbers like .5em :(\n  IDENT_MODE('hexcolor', '#[0-9A-Fa-f]+\\\\b'), FUNCT_MODE('function', '(url|data-uri)', {\n    starts: {\n      className: 'string',\n      end: '[\\\\)\\\\n]',\n      excludeEnd: true\n    }\n  }), FUNCT_MODE('function', IDENT_RE), PARENS_MODE, IDENT_MODE('variable', '@@?' + IDENT_RE, 10), IDENT_MODE('variable', '@{' + IDENT_RE + '}'), IDENT_MODE('built_in', '~?`[^`]*?`'),\n  // inline javascript (or whatever host language) *multiline* string\n  {\n    // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\n    className: 'attribute',\n    begin: IDENT_RE + '\\\\s*:',\n    end: ':',\n    returnBegin: true,\n    excludeEnd: true\n  });\n  var VALUE_WITH_RULESETS = VALUE.concat({\n    begin: '{',\n    end: '}',\n    contains: RULES\n  });\n  var MIXIN_GUARD_MODE = {\n    beginKeywords: 'when',\n    endsWithParent: true,\n    contains: [{\n      beginKeywords: 'and not'\n    }].concat(VALUE) // using this form to override VALUE’s 'function' match\n  };\n\n  /* Rule-Level Modes */\n\n  var RULE_MODE = {\n    className: 'attribute',\n    begin: INTERP_IDENT_RE,\n    end: ':',\n    excludeEnd: true,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE],\n    illegal: /\\S/,\n    starts: {\n      end: '[;}]',\n      returnEnd: true,\n      contains: VALUE,\n      illegal: '[<=$]'\n    }\n  };\n  var AT_RULE_MODE = {\n    className: 'at_rule',\n    // highlight only at-rule keyword\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\n    starts: {\n      end: '[;{}]',\n      returnEnd: true,\n      contains: VALUE,\n      relevance: 0\n    }\n  };\n\n  // variable definitions and calls\n  var VAR_RULE_MODE = {\n    className: 'variable',\n    variants: [\n    // using more strict pattern for higher relevance to increase chances of Less detection.\n    // this is *the only* Less specific statement used in most of the sources, so...\n    // (we’ll still often loose to the css-parser unless there's '//' comment,\n    // simply because 1 variable just can't beat 99 properties :)\n    {\n      begin: '@' + IDENT_RE + '\\\\s*:',\n      relevance: 15\n    }, {\n      begin: '@' + IDENT_RE\n    }],\n    starts: {\n      end: '[;}]',\n      returnEnd: true,\n      contains: VALUE_WITH_RULESETS\n    }\n  };\n  var SELECTOR_MODE = {\n    // first parse unambiguous selectors (i.e. those not starting with tag)\n    // then fall into the scary lookahead-discriminator variant.\n    // this mode also handles mixin definitions and calls\n    variants: [{\n      begin: '[\\\\.#:&\\\\[]',\n      end: '[;{}]' // mixin calls end with ';'\n    }, {\n      begin: INTERP_IDENT_RE + '[^;]*{',\n      end: '{'\n    }],\n    returnBegin: true,\n    returnEnd: true,\n    illegal: '[<=\\'$\"]',\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, MIXIN_GUARD_MODE, IDENT_MODE('keyword', 'all\\\\b'), IDENT_MODE('variable', '@{' + IDENT_RE + '}'),\n    // otherwise it’s identified as tag\n    IDENT_MODE('tag', INTERP_IDENT_RE + '%?', 0),\n    // '%' for more consistent coloring of @keyframes \"tags\"\n    IDENT_MODE('id', '#' + INTERP_IDENT_RE), IDENT_MODE('class', '\\\\.' + INTERP_IDENT_RE, 0), IDENT_MODE('keyword', '&', 0), FUNCT_MODE('pseudo', ':not'), FUNCT_MODE('keyword', ':extend'), IDENT_MODE('pseudo', '::?' + INTERP_IDENT_RE), {\n      className: 'attr_selector',\n      begin: '\\\\[',\n      end: '\\\\]'\n    }, {\n      begin: '\\\\(',\n      end: '\\\\)',\n      contains: VALUE_WITH_RULESETS\n    },\n    // argument list of parametric mixins\n    {\n      begin: '!important'\n    } // eat !important after mixin call or it will be colored as tag\n    ]\n  };\n\n  RULES.push(hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, AT_RULE_MODE, VAR_RULE_MODE, SELECTOR_MODE, RULE_MODE);\n  return {\n    case_insensitive: true,\n    illegal: '[=>\\'/<($\"]',\n    contains: RULES\n  };\n};","map":{"version":3,"names":["module","exports","hljs","IDENT_RE","INTERP_IDENT_RE","RULES","VALUE","STRING_MODE","c","className","begin","IDENT_MODE","name","relevance","FUNCT_MODE","ident","obj","inherit","end","returnBegin","excludeEnd","PARENS_MODE","contains","push","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","CSS_NUMBER_MODE","starts","VALUE_WITH_RULESETS","concat","MIXIN_GUARD_MODE","beginKeywords","endsWithParent","RULE_MODE","illegal","returnEnd","AT_RULE_MODE","VAR_RULE_MODE","variants","SELECTOR_MODE","case_insensitive"],"sources":["/Users/ayanyadav/node_modules/highlight.js/lib/languages/less.js"],"sourcesContent":["module.exports = function(hljs) {\n  var IDENT_RE        = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\n  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';\n\n  /* Generic Modes */\n\n  var RULES = [], VALUE = []; // forward def. for recursive modes\n\n  var STRING_MODE = function(c) { return {\n    // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n    className: 'string', begin: '~?' + c + '.*?' + c\n  };};\n\n  var IDENT_MODE = function(name, begin, relevance) { return {\n    className: name, begin: begin, relevance: relevance\n  };};\n\n  var FUNCT_MODE = function(name, ident, obj) {\n    return hljs.inherit({\n        className: name, begin: ident + '\\\\(', end: '\\\\(',\n        returnBegin: true, excludeEnd: true, relevance: 0\n    }, obj);\n  };\n\n  var PARENS_MODE = {\n    // used only to properly balance nested parens inside mixin call, def. arg list\n    begin: '\\\\(', end: '\\\\)', contains: VALUE, relevance: 0\n  };\n\n  // generic Less highlighter (used almost everywhere except selectors):\n  VALUE.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING_MODE(\"'\"),\n    STRING_MODE('\"'),\n    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(\n    IDENT_MODE('hexcolor', '#[0-9A-Fa-f]+\\\\b'),\n    FUNCT_MODE('function', '(url|data-uri)', {\n      starts: {className: 'string', end: '[\\\\)\\\\n]', excludeEnd: true}\n    }),\n    FUNCT_MODE('function', IDENT_RE),\n    PARENS_MODE,\n    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),\n    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),\n    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string\n    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\n      className: 'attribute', begin: IDENT_RE + '\\\\s*:', end: ':', returnBegin: true, excludeEnd: true\n    }\n  );\n\n  var VALUE_WITH_RULESETS = VALUE.concat({\n    begin: '{', end: '}', contains: RULES\n  });\n\n  var MIXIN_GUARD_MODE = {\n    beginKeywords: 'when', endsWithParent: true,\n    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match\n  };\n\n  /* Rule-Level Modes */\n\n  var RULE_MODE = {\n    className: 'attribute',\n    begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE],\n    illegal: /\\S/,\n    starts: {end: '[;}]', returnEnd: true, contains: VALUE, illegal: '[<=$]'}\n  };\n\n  var AT_RULE_MODE = {\n    className: 'at_rule', // highlight only at-rule keyword\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\n    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}\n  };\n\n  // variable definitions and calls\n  var VAR_RULE_MODE = {\n    className: 'variable',\n    variants: [\n      // using more strict pattern for higher relevance to increase chances of Less detection.\n      // this is *the only* Less specific statement used in most of the sources, so...\n      // (we’ll still often loose to the css-parser unless there's '//' comment,\n      // simply because 1 variable just can't beat 99 properties :)\n      {begin: '@' + IDENT_RE + '\\\\s*:', relevance: 15},\n      {begin: '@' + IDENT_RE}\n    ],\n    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}\n  };\n\n  var SELECTOR_MODE = {\n    // first parse unambiguous selectors (i.e. those not starting with tag)\n    // then fall into the scary lookahead-discriminator variant.\n    // this mode also handles mixin definitions and calls\n    variants: [{\n      begin: '[\\\\.#:&\\\\[]', end: '[;{}]'  // mixin calls end with ';'\n      }, {\n      begin: INTERP_IDENT_RE + '[^;]*{',\n      end: '{'\n    }],\n    returnBegin: true,\n    returnEnd:   true,\n    illegal: '[<=\\'$\"]',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      MIXIN_GUARD_MODE,\n      IDENT_MODE('keyword',  'all\\\\b'),\n      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag\n      IDENT_MODE('tag',       INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes \"tags\"\n      IDENT_MODE('id',       '#'   + INTERP_IDENT_RE),\n      IDENT_MODE('class',    '\\\\.' + INTERP_IDENT_RE, 0),\n      IDENT_MODE('keyword',  '&', 0),\n      FUNCT_MODE('pseudo',   ':not'),\n      FUNCT_MODE('keyword',  ':extend'),\n      IDENT_MODE('pseudo',   '::?' + INTERP_IDENT_RE),\n      {className: 'attr_selector', begin: '\\\\[', end: '\\\\]'},\n      {begin: '\\\\(', end: '\\\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins\n      {begin: '!important'} // eat !important after mixin call or it will be colored as tag\n    ]\n  };\n\n  RULES.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    AT_RULE_MODE,\n    VAR_RULE_MODE,\n    SELECTOR_MODE,\n    RULE_MODE\n  );\n\n  return {\n    case_insensitive: true,\n    illegal: '[=>\\'/<($\"]',\n    contains: RULES\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}